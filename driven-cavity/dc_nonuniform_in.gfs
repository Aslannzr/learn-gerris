# Just bend the coordinates towards the boundaries to better resolve boundary layer

1 0 GfsSimulation GfsBox GfsGEdge {} {

  # Stop the simulation at t = 300 if convergence has not been reached before
  Time { end = 300 }

  # Use an initial refinement of 6 levels (i.e. 2^6=64x64)
  Refine 6

  Metric M {
      x = tanh(4.*rx)/tanh(4./2.)/2.
      y = tanh(4.*ry)/tanh(4./2.)/2.
  }

  # Set a viscosity source term on the velocity vector with x-component U
  # The Reynolds number is Re = L*U/Nu = 1*1/1e-3 = 1000
  SourceDiffusion {} U 1e-3
  SourceDiffusion {} V 1e-3

  # Use hypre to accelerate convergence. (Don't have it now)
  # GModule hypre
  ProjectionParams { tolerance = 1e-6 }
  ApproxProjectionParams { tolerance = 1e-6 }

  # At the end of the simulation, computes the values of the variables
  # at the locations defined in files xprofile, yprofile and stores the
  # results in files xprof, yprof
  OutputLocation { start = end } xprof_nonuni xprofile
  OutputLocation { start = end } yprof_nonuni yprofile

  OutputSimulation { start = end } end.gfs

  # Stops the simulation if the maximum of the absolute value of the
  # difference between the current U field and the U field 10 timesteps
  # before is smaller than 1e-3. NOTE, this is larger than in other two sims
  # to get convergence
  #
  # Stores this difference in the DU field (this can be used for
  # monitoring the convergence of the simulation).
  EventStop { istep = 10 } U 1e-3 DU
  # This also prints time
  OutputScalarNorm { istep = 10 } stdout { v = DU }
  OutputScalarNorm { istep = 10 } du_stats_nonuni.dat { v = DU }
  
  OutputProjectionStats { istep = 10 } stdout
  # Pipes a bitmap PPM image representation of the velocity field at the end of the simulation
  # into the ImageMagick converter "convert" to create the
  # corresponding EPS file
  OutputPPM { start = end } { convert -colors 256 ppm:- velocity.eps } {
    v = Velocity
  }

  OutputSimulation { start = end } end.gfs
}
# This is for serial simulation (one box). I use -s 1 to get it to 4
GfsBox {

  # Dirichlet boundary conditions for both components of the velocity on all sides:
  # - non-slip (U = V = 0) on right, left and bottom boundaries
  # - tangential velocity equal to 1 (U = 1) on top boundary

  top = Boundary {
    BcDirichlet U 1
    BcDirichlet V 0
  }
  bottom = Boundary {
    BcDirichlet U 0
    BcDirichlet V 0
  }
  right = Boundary {
    BcDirichlet U 0
    BcDirichlet V 0
  }
  left = Boundary {
    BcDirichlet U 0
    BcDirichlet V 0
  }
}
