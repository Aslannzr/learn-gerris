4 3 GfsSimulation GfsBox GfsGEdge {} {
    Global {
	double VISCOSITY(double T){
	    return 0.003*T + (1. - T)*0.005;
	}
    }
  Time { end = 1 dtmax = 5e-3 }
  Refine 7

  # The tracer T is used to track both phases
  VariableTracerVOF {} T
 
  # The initial sinusoidal interface
  # Note that we translate by 0.5 up so that the interface is in the half of
  # the tank
  InitFraction {} T (0.05*cos (2.*M_PI*x) + y) { ty = 0.5 }

  AdaptVorticity { istep = 1 } { maxlevel = 7 cmax = 2e-2 }
  AdaptGradient { istep = 1 } { maxlevel = 7 cmax = 1e-2 } T

  # The dynamic viscosity; for fun different in each fluid
  # SourceViscosity {} { return 0.003*T + (1-T)*0.005; }
  # Or equivalently
  SourceViscosity VISCOSITY(T)

  # rho = 1/alpha
  # This defines the inverse of the density of the fluids as a
  # function of T
  PhysicalParams { alpha = 1./(T*1.225 + (1. - T)*0.1694) }

  # We also need gravity
  Source {} V -9.81

  OutputTime { istep = 10 } stderr
  OutputBalance { istep = 10 } stderr
  OutputProjectionStats { istep = 10 } stderr
  OutputDiffusionStats { istep = 10 } stderr
  OutputPPM { istep = 2 } { ppm2mpeg > vort.mpg} {
    min = -30 max = 30 v = Vorticity
  }
  OutputPPM { istep = 2 } { ppm2mpeg > t.mpg } {
    min = 0 max = 1 v = T
  }
  OutputPPM { start = end } { convert -colors 256 ppm:- vort.eps } {
    min = -30 max = 30 v = Vorticity
  }
  OutputPPM { start = end } { convert -colors 256 ppm:- t.eps } {
    min = 0 max = 1 v = T
  }
  OutputTiming { start = end } stderr
  OutputSimulation { step = 0.1 } stdout
  EventScript { start = 0 } { echo "Save t-0.eps { format = EPS }" }
  EventScript { start = 0.7 step = 0.1 } { echo "Save t-$GfsTime.eps { format = EPS }" }
}
GfsBox {}
GfsBox {}
GfsBox {}
GfsBox {}
1 2 top
2 3 top
1 4 bottom
