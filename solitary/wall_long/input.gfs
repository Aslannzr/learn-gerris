Define MIN(a,b) (((a)<(b))?(a):(b))

Define MAX(a,b) (((a)>(b))?(a):(b))

Define FILTER 1

Define MAXLEVEL 5

Define MINLEVEL 4

18 18 GfsSimulation GfsBox GfsGEdge {} {
    Global{
	double air_density = 1.;
	double water_density = 1000.;

        double air_viscosity = 1E-5;  // dynamic
        double water_viscosity = 1E-3;
        
        double gravity = -9.81;
        // Note that this effects coordinate shift
        double depth = 1;
        double amplitude = AMPLITUDE ;
        
	double var(double T, double Tf, double min, double max){
	    if(FILTER > 0.5)  // True for 1.0 use filter
	        return min + CLAMP(Tf, 0, 1)*(max - min);
	    else
		return min + CLAMP(T, 0, 1)*(max - min);
	}
	
	double set_density(double T, double Tf)
	{
	    return var(T, Tf, air_density, water_density);
	}

	double set_viscosity(double T, double Tf)
	{
	    return var(T, Tf, air_viscosity, water_viscosity);
	}
        
        // Init profile following Ramaswamy @ JFP 90, 396-430
	double get_height(double d, double H, double t, double x)
	{
            const double g = fabs(gravity); 
            const double c = sqrt(g*d*(1. + H/d));
  	    double eta = d + H/pow(cosh(sqrt(3*H/4/pow(d, 3.))*(x-c*t)), 2);
            return eta;
	}

	double tracer_init(double d, double H, double x, double y)
	{
	    return (y > get_height(d, H, 0.0, x)) ? 0. : 1.;
	}

        double get_U(double d, double H, double t, double x, double y)
        {
            const double g = fabs(gravity); 
            const double c = sqrt(g*d*(1. + H/d));
  	    double surface = get_height(d, H, t, x);
            const double arg = sqrt(3*H/4/pow(d, 3))*(x-c*t);
            double u = sqrt(g*d)*H/d/pow(cosh(arg), 2);
            
            return (y > surface) ? 0.0 : u;
        }

        double get_V(double d, double H, double t, double x, double y)
        {
            const double g = fabs(gravity); 
            const double c = sqrt(g*d*(1. + H/d));
  	    double surface = get_height(d, H, t, x);

            const double arg = sqrt(3*H/4/pow(d, 3))*(x-c*t);
            double v = sqrt(3*g*d)*pow(H/d, 1.5)*(y/d)/pow(cosh(arg), 2)*tanh(arg);
            
            return (y > surface) ? 0.0 : v;
        }

    
        double splash(double x, double y)
        {
            return (y <= WHEIGHT) ? (fabs(x-20)-0.25) : y-WHEIGHT;
        }
    }
    
    # Shift coords to have left wall at x=0 and bottom at y = 0.
    # This are axis for which Ramaswamy has the formulas
    MapTransform{tx=-4.5 ty=0.5}
    
    GfsAdvectionParams {                                                            
	cfl = 0.5
        gradient = gfs_center_superbee_gradient
        # gfs_center_gradient second-order centered estimate (no limiter), 
        # (default) gfs_center_van_leer_gradient van Leer generalised minmod limiter (θ = 2), 
        # gfs_center_minmod_gradient minmod limiter, 
        # gfs_center_sweby_gradient sweby limiter (β = 1.5), 
        # gfs_center_superbee_gradient
    }
    # Surface tracking
    VariableTracerVOFHeight T1
    # Refinement based on grad tracer + where the interface is

    # Gravity
    Source {} V gravity

    # Solver setup
    ApproxProjectionParams { tolerance = 1e-3 }
    ProjectionParams { tolerance = 1e-3 }
    # Spash zone
    Refine((x > 18) ? MAXLEVEL : MINLEVEL)
    # Where the fluid is
    Refine( ((y > depth-0.1) && (y < depth + amplitude+0.1)) ? MAXLEVEL : MINLEVEL)

    #Solid (splash(x, y))
    
    RefineSolid MAXLEVEL
    # Refine the whole column
    Refine( ((fabs(x-20)-0.25) < 0.25) ? MAXLEVEL : MINLEVEL )

    # Things start from rest
    Init {} {
        T1 = tracer_init(depth, amplitude, x, y)             
	U = get_U(depth, amplitude, 0.0, x, y)
	V = get_V(depth, amplitude, 0.0, x, y)
    }

    # Variable density and viscosity for the two fluids
    # Now it is based on filtered tracer but this needs to be tested, smeared once
    VariableFiltered T1f T1 1
    PhysicalParams { alpha = 1./set_density(T1, T1f)
                     L=2}
    
    SourceViscosity set_viscosity(T1, T1f)
    
    # Simulation setup
    Time { iend=1 dtmax=5E-3 }

    # By step count, for time see times
    # Outputs 
    OutputProjectionStats { istep = 11 } stdout
    OutputTime {istep = 1} stdout
    
    # By step count, for time see times
    OutputSimulation { step=0.1 } fields-%ld.vtk { format=VTK }
    OutputTime { istep=1 } times.txt

    VariablePosition {} Y T1 y
    VariablePosition {} X T1 x
    # Maximum of Y coords that are on the interface is ... the height :)
    OutputScalarNorm { istep = 1} yposition.txt { v = (T1 > 1e-6 && T1 < 1. - 1e-6 ? y : 0.) format=%.16e}
    OutputParticle { istep = 1} xposition.txt  0 1 0
    # In both water and air
    OutputScalarSum { istep = 1} mass.txt { v=set_density(T1, T1f)*T1 format=%.16e}
    OutputScalarSum { istep = 1} kinetic.txt { v = Velocity2*set_density(T1, T1f)*T1 format=%.16e}
    OutputScalarSum { istep = 1} potential.txt { v = y*gravity*set_density(T1, T1f)*T1 format=%.16e}

    # Some idea about cell counts
    OutputAdaptStats { istep = 1 } adaptstats.txt

    m4_ifelse(ADAPTIVITY, 1, AdaptGradient { istep = 1 } {
                     cmax = 1E-4
                     minlevel = 7
                     # NOTE maxlevel is now infty
                 } T1
              AdaptVorticity { istep = 1 } { minlevel=7 cmax = 1e-4 }
             )
}
#
GfsBox{top = Boundary {
	      BcDirichlet U 0}
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }#1
       left = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#2
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#3
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#4
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#5
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#6
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#7
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#8
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#9
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#10
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#11
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#12
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#13
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{top = Boundary {
	      BcDirichlet U 0}#14
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{#15
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{#16
       bottom = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }
       right = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
GfsBox{#17
      }
GfsBox{#18
       right = Boundary {
           BcDirichlet U 0
           BcDirichlet V 0
       }}
1 2 right
2 3 right
3 4 right
4 5 right
5 6 right
6 7 right
7 8 right
8 9 right
9 10 right
10 11 right
11 12 right
12 13 right
13 14 right
14 15 right
15 16 right
17 18 right
15 17 top
16 18 top
